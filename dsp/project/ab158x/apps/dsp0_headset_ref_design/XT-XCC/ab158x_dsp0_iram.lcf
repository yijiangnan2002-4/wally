/* ===========================================================================
 *
 * @COPYRIGHT	Copyright(c) 2015 AIROHA TECHNOLOGY CORP. CO., LTD. ALL RIGHTS RESERVED
 *
 * @DETAILS		The reference linker command file for the Andes.  Applications
 *   			may use unmodified, or copy this to an application directory to
 *   			modify as needed.
 *
 * =========================================================================== */
ENTRY(_ResetVector_text_start)

MEMORY {
    DRAM(rw)                       : ORIGIN = 0x04580000, LENGTH = 1024K
    IRAM(rx)                       : ORIGIN = 0x04700000, LENGTH = 256K
    ROM_LOG_STRING(rx)             : ORIGIN = 0x06000000, LENGTH = 32M
}

 /* Highest address of the stack */
__stack = ORIGIN(DRAM) + _stack_size;    /* end of DRAM */

/* Generate a link error if stack don't fit into DRAM */
_stack_size = 0x1000; /* required amount of stack 1KB */

/* stack start */
_stack_start = ORIGIN(DRAM);

/* Linker symbol provided for C/Assembly Code */
_iram_start     = ORIGIN(IRAM);
_iram_length    = LENGTH(IRAM);
_iram_end       = _iram_start + _iram_length;

_dram_start     = ORIGIN(DRAM);
_dram_length    = LENGTH(DRAM);
_dram_end       = _dram_start + _dram_length;

SECTIONS {
    /* @@@static vector@@@ */
    _ResetVector_load = LOADADDR(.ResetVector.text);
    .ResetVector.text : ALIGN(8)
    {
        _ResetVector_text_start = ABSOLUTE(.);
        KEEP (*(.ResetVector.literal .ResetVector.text))
        KEEP (*(.Reset.literal .Reset.text))
        . = ABSOLUTE(_ResetVector_text_start) + 0x400;
        _ResetVector_text_end = ALIGN(0x8);
    } >IRAM   AT > IRAM

    /* @@@Dynamic vectors@@@ */
    _DynamicVectors_load = LOADADDR(.DynamicVectors.text);
    .DynamicVectors.text : ALIGN(8)
    {
        _DynamicVectors_start = ABSOLUTE(.);

        /* WindowVectors literal and text */
        _WindowVectors_text_start = ABSOLUTE(.);
        KEEP (*(.WindowVectors.text))
        . = ALIGN (4);
        _WindowVectors_text_end = ABSOLUTE(.);
        . = ABSOLUTE(_WindowVectors_text_start) + 0x178;

        /* Level2 literal and text */
        _Level2InterruptVector_literal_start = ABSOLUTE(.);
        *(.Level2InterruptVector.literal)
        . = ABSOLUTE(_Level2InterruptVector_literal_start) + 0x4;
        _Level2InterruptVector_text_start = ABSOLUTE(.);
        KEEP (*(.Level2InterruptVector.text))
        . = ABSOLUTE(_Level2InterruptVector_text_start) + 0x1c;

        /* Level3 literal and text */
        _Level3InterruptVector_literal_start = ABSOLUTE(.);
        *(.Level3InterruptVector.literal)
        . = ABSOLUTE(_Level3InterruptVector_literal_start) + 0x4;
        _Level3InterruptVector_text_start = ABSOLUTE(.);
        KEEP (*(.Level3InterruptVector.text))
        . = ABSOLUTE(_Level3InterruptVector_text_start) + 0x1c;

        /* Level4 literal and text */
        _Level4InterruptVector_literal_start = ABSOLUTE(.);
        *(.Level4InterruptVector.literal)
        . = ABSOLUTE(_Level4InterruptVector_literal_start) + 0x4;
        _Level4InterruptVector_text_start = ABSOLUTE(.);
        KEEP (*(.Level4InterruptVector.text))
        . = ABSOLUTE(_Level4InterruptVector_text_start) + 0x1c;

        /* DebugException literal and text */
        _DebugExceptionVector_literal_start = ABSOLUTE(.);
        *(.DebugExceptionVector.literal)
        . = ABSOLUTE(_DebugExceptionVector_literal_start) + 0x4;
        _DebugExceptionVector_text_start = ABSOLUTE(.);
        KEEP (*(.DebugExceptionVector.text))
        . = ABSOLUTE(_DebugExceptionVector_text_start) + 0x1c;

        /* NMIException literal and text */
        _NMIExceptionVector_literal_start = ABSOLUTE(.);
        *(.NMIExceptionVector.literal)
        . = ABSOLUTE(_NMIExceptionVector_literal_start)+ 0x4;
        _NMIExceptionVector_text_start = ABSOLUTE(.);
        KEEP (*(.NMIExceptionVector.text))
        . = ABSOLUTE(_NMIExceptionVector_text_start) + 0x1c;

        /* KernelException literal and text */
        _KernelExceptionVector_literal_start = ABSOLUTE(.);
        *(.KernelExceptionVector.literal)
        . = ABSOLUTE(_KernelExceptionVector_literal_start) + 0x4;
        _KernelExceptionVector_text_start = ABSOLUTE(.);
        KEEP (*(.KernelExceptionVector.text))
        . = ABSOLUTE(_KernelExceptionVector_text_start) + 0x1c;

        /* UserException literal and text */
        _UserExceptionVector_literal_start = ABSOLUTE(.);
        *(.UserExceptionVector.literal)
        . = ABSOLUTE(_UserExceptionVector_literal_start) + 0x4;
        _UserExceptionVector_text_start = ABSOLUTE(.);
        KEEP (*(.UserExceptionVector.text))
        . = ABSOLUTE(_UserExceptionVector_text_start) + 0x1c;

        /* DoubleException literal and text */
        _DoubleExceptionVector_literal_start = ABSOLUTE(.);
        *(.DoubleExceptionVector.literal)
        . = ABSOLUTE(_DoubleExceptionVector_literal_start) + 0x4;
        _DoubleExceptionVector_text_start = ABSOLUTE(.);
        KEEP (*(.DoubleExceptionVector.text))
        . = ABSOLUTE(_DoubleExceptionVector_text_start) + 0x1c;

        _DynamicVectors_end = ABSOLUTE(.);
    } >IRAM   AT > IRAM

    /* @@@rom text and rodata@@@ */
    _text_load = LOADADDR(.text);
    . = ALIGN(16);
    .text : ALIGN(16)
    {
        _text_start = ABSOLUTE(.);

        *(.literal* .text*)
        *(.init.literal .init)

        . = ALIGN(16);
        _text_end = ABSOLUTE(.);
    } >IRAM   AT > IRAM

    /* @@@iram text@@@ */
    _iram_text_load = LOADADDR(.iram.text);
    .iram.text : ALIGN(8)
    {
        . = ALIGN (8);
        _iram_text_start = ABSOLUTE(.);

        *(.iram*)
        *(.sysram_code)
        *(.sysram_code*)

        . = ALIGN (8);
        _iram_text_end = ABSOLUTE(.);
    } >IRAM    AT > IRAM

    /* @@@region loader@@@ */
    _region_loader_load = LOADADDR(.region_loader);
    .region_loader : ALIGN(8)
    {
        . = ALIGN (8);
        _region_loader_start = ABSOLUTE(.);

        *(.region_loader.literal .region_loader.text)

        . = ALIGN (8);
        _region_loader_end = ABSOLUTE(.);
    } >IRAM    AT > IRAM

    /* @@@iram pic memory@@@ */
    .preloader_pic_iram (NOLOAD) :
    {
        . = ALIGN(8);
        _preloader_pic_iram_start = .;

        . = ALIGN(8);
        _preloader_pic_iram_end   = ORIGIN(IRAM)+ LENGTH(IRAM);
    } > IRAM

    /* @@@stack memory@@@ */
    .stack (NOLOAD) :
    {
        . = ALIGN(8);

        . = . + _stack_size;
        *(.isr_stack)
        *(.isr_stack*)

        . = ALIGN(8);
    } > DRAM

    /* @@@dram data and bss@@@ */
    _data_load = LOADADDR(.data);
    _cached_sysram_text_data_load = LOADADDR(.data);
    _noncached_sysram_data_load = LOADADDR(.data);
    .data : ALIGN(8)
    {
        . = ALIGN (8);
        _data_start = ABSOLUTE(.);
        _cached_sysram_text_data_start = .;
        _noncached_sysram_data_start = .;

        *(.rodata)
        *(.rodata*)
        *(.clib.rodata*)
        *(.data)
        *(.data*)
        *(.clib.data*)
        *(.rtos.percpu.data*)
        KEEP (*(.eh_frame))
        *(.sysram_rodata)
        *(.sysram_rodata*)
        *(.cached_sysram_rwdata)
        *(.cached_sysram_rwdata*)
        *(.noncached_sysram_rwdata)
        *(.noncached_sysram_rwdata*)
        . = ALIGN (8);
        _data_end = ABSOLUTE(.);
        _cached_sysram_text_data_end = .;
        _noncached_sysram_data_end = .;

        . = ALIGN (8);
        _log_filter_start = .;
        KEEP(*(SORT_BY_NAME(.log_filter.*)))
        _log_filter_end = .;
    
    } >DRAM   AT > DRAM

    .bss (NOLOAD):
    {
        . = ALIGN (8);
        _bss_start = ABSOLUTE(.);
        _cached_sysram_bss_start = .;
        _noncached_sysram_bss_start = .;

        *(.bss)
        *(.bss.*)
        *(.clib.bss*)
        *(.rtos.percpu.bss*)
        *(COMMON)
        *(.cached_sysram_zidata)
        *(.cached_sysram_zidata*)
        *(.noncached_sysram_zidata)
        *(.noncached_sysram_zidata*)

        . = ALIGN (8);
        _bss_end = ABSOLUTE(.);
        _cached_sysram_bss_end = .;
        _noncached_sysram_bss_end = .;
    } > DRAM

    /* @@@dram pic memory@@@ */
    .preloader_pic_dram (NOLOAD) :
    {
        . = ALIGN(8);
        _preloader_pic_dram_start = .;

        . = ALIGN(8);
        _preloader_pic_dram_end   = ORIGIN(DRAM)+ LENGTH(DRAM);
    } > DRAM

    /* @@@log string@@@ */
    .log_str :
    {
        KEEP(*(.log_version))
        KEEP(*(.log_timestamp))
        KEEP(*(SORT_BY_NAME(.log_filter_mirror*)))
        KEEP(*(.log_filter_end))
        KEEP(*(.log_chip_option))
        *(.log_string)
    } > ROM_LOG_STRING  AT> ROM_LOG_STRING

    /* @@@reserved section for debug symbol when add --gc-sections for LDFLAG @@@ */
    .xt.prop 0:
    {
        KEEP (*(.xt.prop))
        KEEP (*(.xt.prop.*))
        KEEP (*(.gnu.linkonce.prop.*))
    }
}

