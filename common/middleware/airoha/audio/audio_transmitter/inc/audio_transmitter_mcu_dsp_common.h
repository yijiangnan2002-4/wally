/* Copyright Statement:
 *
 * (C) 2022  Airoha Technology Corp. All rights reserved.
 *
 * This software/firmware and related documentation ("Airoha Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to Airoha Technology Corp. ("Airoha") and/or its licensors.
 * Without the prior written permission of Airoha and/or its licensors,
 * any reproduction, modification, use or disclosure of Airoha Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 * You may only use, reproduce, modify, or distribute (as applicable) Airoha Software
 * if you have agreed to and been bound by the applicable license agreement with
 * Airoha ("License Agreement") and been granted explicit permission to do so within
 * the License Agreement ("Permitted User").  If you are not a Permitted User,
 * please cease any access or use of Airoha Software immediately.
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT AIROHA SOFTWARE RECEIVED FROM AIROHA AND/OR ITS REPRESENTATIVES
 * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. AIROHA EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES AIROHA PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH AIROHA SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN AIROHA SOFTWARE. AIROHA SHALL ALSO NOT BE RESPONSIBLE FOR ANY AIROHA
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND AIROHA'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO AIROHA SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT AIROHA'S OPTION, TO REVISE OR REPLACE AIROHA SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * AIROHA FOR SUCH AIROHA SOFTWARE AT ISSUE.
 */

#ifndef __AUDIO_TRANSMITTER_MCU_DSP_COMMON_H__
#define __AUDIO_TRANSMITTER_MCU_DSP_COMMON_H__

#ifdef __cplusplus
extern "C" {
#endif
typedef enum {
    AUDIO_TRANSMITTER_A2DP_SOURCE                  = 0,
    AUDIO_TRANSMITTER_GSENSOR                      = 1,
    AUDIO_TRANSMITTER_MULTI_MIC_STREAM             = 2,
    AUDIO_TRANSMITTER_GAMING_MODE                  = 3,
    AUDIO_TRANSMITTER_ANC_MONITOR_STREAM           = 4,
    AUDIO_TRANSMITTER_TEST                         = 5,
    AUDIO_TRANSMITTER_TDM                          = 6,
    AUDIO_TRANSMITTER_WIRED_AUDIO                  = 7,
    AUDIO_TRANSMITTER_ADVANCED_PASSTHROUGH         = 8,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE             = 9,
    AUDIO_TRANSMITTER_AUDIO_HW_LOOPBACK            = 10,
    AUDIO_TRANSMITTER_ADAPTIVE_EQ_MONITOR_STREAM   = 11,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE          = 12,
    AUDIO_TRANSMITTER_DCHS                         = 13,
    AUDIO_TRANSMITTER_WIRELESS_MIC_RX              = 14,
    AUDIO_TRANSMITTER_ADVANCED_RECORD              = 15,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE              = 16,
    AUDIO_TRANSMITTER_SCENARIO_TYPE_MAX
} audio_transmitter_scenario_type_t;

typedef enum {
    AUDIO_TRANSMITTER_GAMING_MODE_VOICE_HEADSET = 0,
    AUDIO_TRANSMITTER_GAMING_MODE_VOICE_DONGLE_USB_OUT,
    AUDIO_TRANSMITTER_GAMING_MODE_MUSIC_DONGLE_USB_IN_0,
    AUDIO_TRANSMITTER_GAMING_MODE_MUSIC_DONGLE_USB_IN_1,
    AUDIO_TRANSMITTER_GAMING_MODE_VOICE_DONGLE_LINE_OUT,
    AUDIO_TRANSMITTER_GAMING_MODE_MUSIC_DONGLE_LINE_IN,
    AUDIO_TRANSMITTER_GAMING_MODE_VOICE_DONGLE_I2S_OUT,
    AUDIO_TRANSMITTER_GAMING_MODE_MUSIC_DONGLE_I2S_IN,
    AUDIO_TRANSMITTER_GAMING_MODE_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_gamingmode_t;

typedef enum {
    AUDIO_TRANSMITTER_A2DP_SOURCE_WATCH = 0,
    AUDIO_TRANSMITTER_A2DP_SOURCE_LINEIN,
    AUDIO_TRANSMITTER_A2DP_SOURCE_USB,
    AUDIO_TRANSMITTER_A2DP_SOURCE_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_a2dpsource_t;

typedef enum {
    AUDIO_TRANSMITTER_MULTI_MIC_STREAM_FUNCTION_A = 0,
    AUDIO_TRANSMITTER_MULTI_MIC_STREAM_FUNCTION_B,
    AUDIO_TRANSMITTER_MULTI_MIC_STREAM_FUNCTION_C,
    AUDIO_TRANSMITTER_MULTI_MIC_STREAM_FUNCTION_F,
    AUDIO_TRANSMITTER_MULTI_MIC_STREAM_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_multimic_t;

typedef enum {
    AUDIO_TRANSMITTER_GSENSOR_FUNCTION_D = 0,
    AUDIO_TRANSMITTER_GSENSOR_FUNCTION_F,
    AUDIO_TRANSMITTER_GSENSOR_FUNCTION_G,
    AUDIO_TRANSMITTER_GSENSOR_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_gsensor_t;

typedef enum {
    AUDIO_TRANSMITTER_TEST_AUDIO_LOOPBACK = 0,
    AUDIO_TRANSMITTER_TEST_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_test_t;

typedef enum {
    AUDIO_TRANSMITTER_WIRED_AUDIO_USB_OUT = 0,
    AUDIO_TRANSMITTER_WIRED_AUDIO_USB_IN_0 = 1,
    AUDIO_TRANSMITTER_WIRED_AUDIO_USB_IN_1 = 2,
    AUDIO_TRANSMITTER_WIRED_AUDIO_LINE_OUT = 3,
    AUDIO_TRANSMITTER_WIRED_AUDIO_LINE_IN = 4,
    AUDIO_TRANSMITTER_WIRED_AUDIO_DUAL_CHIP_LINE_IN_MASTER = 5,//I2S2->VUL3->DL3->DAC
    AUDIO_TRANSMITTER_WIRED_AUDIO_DUAL_CHIP_LINE_IN_SLAVE = 6,//I2S0->VUL3->DL3->DAC
    AUDIO_TRANSMITTER_WIRED_AUDIO_DUAL_CHIP_LINE_OUT_MASTER = 7,//ADC->VUL1->DL4->I2S0
    AUDIO_TRANSMITTER_WIRED_AUDIO_USB_IN_OUT_IEM = 8,
    AUDIO_TRANSMITTER_WIRED_AUDIO_MAINSTREAM = 9,
    AUDIO_TRANSMITTER_WIRED_AUDIO_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_wiredaudio_t;

typedef enum {
    AUDIO_TRANSMITTER_ADVANCED_PASSTHROUGH_HEARING_AID = 0,
    AUDIO_TRANSMITTER_ADVANCED_PASSTHROUGH_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_advanced_passthrough_t;

typedef enum {
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_VOICE_USB_OUT = 0,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_MUSIC_USB_IN_0,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_MUSIC_USB_IN_1,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_VOICE_LINE_OUT,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_MUSIC_LINE_IN,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_MUSIC_I2S_IN,
    AUDIO_TRANSMITTER_BLE_AUDIO_DONGLE_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_bleaudiodongle_t;

typedef enum {
    AUDIO_TRANSMITTER_AUDIO_HW_LOOPBACK_I2S0_TO_DAC = 0,
    AUDIO_TRANSMITTER_AUDIO_HW_LOOPBACK_ADC_TO_I2S0,
    AUDIO_TRANSMITTER_AUDIO_HW_LOOPBACK_LINEIN_TO_I2S2,
    AUDIO_TRANSMITTER_AUDIO_HW_LOOPBACK_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_audio_hw_loopback_t;

typedef enum {
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_UL_USB_OUT_0 = 0,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_UL_LINE_OUT,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_UL_I2S_MST_OUT_0,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_UL_I2S_SLV_OUT_0,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_DL_USB_IN_0,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_DL_USB_IN_1,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_DL_LINE_IN,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_DL_I2S_MST_IN_0,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_DL_I2S_SLV_IN_0,
    AUDIO_TRANSMITTER_ULL_AUDIO_V2_DONGLE_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_ullaudiov2dongle_t;

typedef enum {
    AUDIO_TRANSMITTER_DCHS_UART_DL = 0,
    AUDIO_TRANSMITTER_DCHS_UART_UL,
    AUDIO_TRANSMITTER_DCHS_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_dchs_t;

typedef enum {
    AUDIO_TRANSMITTER_WIRELESS_MIC_RX_UL_USB_OUT_0 = 0,
    AUDIO_TRANSMITTER_WIRELESS_MIC_RX_UL_LINE_OUT,
    AUDIO_TRANSMITTER_WIRELESS_MIC_RX_UL_I2S_MST_OUT_0,
    AUDIO_TRANSMITTER_WIRELESS_MIC_RX_UL_I2S_SLV_OUT_0,
    AUDIO_TRANSMITTER_WIRELESS_MIC_RX_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_wirelessmicrx_t;

typedef enum {
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_UL_HFP_USB_OUT_0,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_HFP_USB_IN_0,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_A2DP_USB_IN_0,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_UL_HFP_USB_OUT_1,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_HFP_USB_IN_1,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_A2DP_USB_IN_1,
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_A2DP_AFE_IN_0, /* line in */
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_A2DP_AFE_IN_1, /* i2s in */
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_A2DP_AFE_IN_2, /* dummy in */
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_HFP_AFE_IN_0,  /* line in */
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_HFP_AFE_IN_1,  /* i2s in */
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_DL_HFP_AFE_IN_2,  /* dummy in */
    AUDIO_TRANSMITTER_BT_AUDIO_DONGLE_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_btaudiodongle_t;

typedef enum {
    AUDIO_TRANSMITTER_ADVANCED_RECORD_N_MIC = 0,
    AUDIO_TRANSMITTER_ADVANCED_RECORD_SUB_ID_MAX
} audio_transmitter_scenario_sub_id_advanced_record_t;

typedef union {
#ifdef AIR_MULTI_MIC_STREAM_ENABLE
    audio_transmitter_scenario_sub_id_multimic_t multimic_id;
#endif
#ifdef MTK_SENSOR_SOURCE_ENABLE
    audio_transmitter_scenario_sub_id_gsensor_t gsensor_id;
#endif
#if defined(MTK_GAMING_MODE_HEADSET) || defined(AIR_GAMING_MODE_DONGLE_ENABLE)
    audio_transmitter_scenario_sub_id_gamingmode_t gamingmode_id;
#endif
#if defined(AIR_WIRED_AUDIO_ENABLE)
    audio_transmitter_scenario_sub_id_wiredaudio_t wiredaudio_id;
#endif
    audio_transmitter_scenario_sub_id_test_t test_id;
#if defined(AIR_ADVANCED_PASSTHROUGH_ENABLE)
    audio_transmitter_scenario_sub_id_advanced_passthrough_t advanced_passthrough_id;
#endif /* AIR_ADVANCED_PASSTHROUGH_ENABLE */
#if defined(AIR_BLE_AUDIO_DONGLE_ENABLE)
    audio_transmitter_scenario_sub_id_bleaudiodongle_t ble_audio_dongle_id;
#endif /* AIR_BLE_AUDIO_DONGLE_ENABLE */
#if defined(AIR_ULL_AUDIO_V2_DONGLE_ENABLE)
    audio_transmitter_scenario_sub_id_ullaudiov2dongle_t ull_audio_v2_dongle_id;
#endif /* AIR_ULL_AUDIO_V2_DONGLE_ENABLE */
#ifdef AIR_DCHS_MODE_ENABLE
    audio_transmitter_scenario_sub_id_dchs_t dchs_id;
#endif
#if defined(AIR_AUDIO_HW_LOOPBACK_ENABLE)
    audio_transmitter_scenario_sub_id_audio_hw_loopback_t audio_hw_loopback_id;
#endif /* AIR_AUDIO_HW_LOOPBACK_ENABLE */
#if defined(AIR_WIRELESS_MIC_RX_ENABLE)
    audio_transmitter_scenario_sub_id_wirelessmicrx_t wireless_mic_rx_id;
#endif /* AIR_WIRELESS_MIC_RX_ENABLE */
#if defined (AIR_BT_AUDIO_DONGLE_ENABLE)
    audio_transmitter_scenario_sub_id_btaudiodongle_t bt_audio_dongle_id;
#endif /* AIR_BT_AUDIO_DONGLE_ENABLE */
#if defined(AIR_RECORD_ADVANCED_ENABLE)
    audio_transmitter_scenario_sub_id_advanced_record_t advanced_record_id;
#endif
    uint32_t scenario_id;
} audio_transmitter_scenario_sub_id_t;

/*****************************scenario runtime config************************************************/
#if defined (AIR_BT_ULTRA_LOW_LATENCY_ENABLE) || defined (AIR_GAMING_MODE_DONGLE_ENABLE)
typedef enum {
    GAMING_MODE_CONFIG_OP_VOL_LEVEL_VOICE_L = 0,
    GAMING_MODE_CONFIG_OP_VOL_LEVEL_VOICE_R,
    GAMING_MODE_CONFIG_OP_VOL_LEVEL_VOICE_DUL,
    GAMING_MODE_CONFIG_OP_VOL_LEVEL_MUSIC_L,
    GAMING_MODE_CONFIG_OP_VOL_LEVEL_MUSIC_R,
    GAMING_MODE_CONFIG_OP_VOL_LEVEL_MUSIC_DUL,
    GAMING_MODE_CONFIG_OP_MUSIC_MIX,
    GAMING_MODE_CONFIG_OP_MUSIC_UNMIX,
    GAMING_MODE_CONFIG_OP_LATENCY_SWITCH,
    GAMING_MODE_CONFIG_OP_MAX
} gaming_mode_runtime_config_operation_t;
#endif

#if defined (AIR_WIRED_AUDIO_ENABLE)
typedef enum {
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_VOICE_L = 0,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_VOICE_R,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_VOICE_DUL,
    WIRED_AUDIO_CONFIG_OP_VOL_DB_VOICE,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_L,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_R,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_CH_3,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_CH_4,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_CH_5,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_CH_6,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_CH_7,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_CH_8,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_MUSIC_DUL,
    WIRED_AUDIO_CONFIG_OP_VOL_DB_MUSIC,
    WIRED_AUDIO_CONFIG_OP_MUSIC_MIX,
    WIRED_AUDIO_CONFIG_OP_MUSIC_UNMIX,
    WIRED_AUDIO_CONFIG_OP_VOL_LEVEL_LINEIN,
    WIRED_AUDIO_CONFIG_OP_DEVICE_LINEIN,
    WIRED_AUDIO_CONFIG_OP_MAX
} wired_audio_runtime_config_operation_t;

#endif

#if defined (AIR_BLE_AUDIO_DONGLE_ENABLE)
typedef enum {
    BLE_AUDIO_DONGLE_CONFIG_OP_VOL_LEVEL_VOICE_L = 0,
    BLE_AUDIO_DONGLE_CONFIG_OP_VOL_LEVEL_VOICE_R,
    BLE_AUDIO_DONGLE_CONFIG_OP_VOL_LEVEL_VOICE_DUL,
    BLE_AUDIO_DONGLE_CONFIG_OP_VOL_LEVEL_MUSIC_L,
    BLE_AUDIO_DONGLE_CONFIG_OP_VOL_LEVEL_MUSIC_R,
    BLE_AUDIO_DONGLE_CONFIG_OP_VOL_LEVEL_MUSIC_DUL,
    BLE_AUDIO_DONGLE_CONFIG_OP_MUSIC_MIX,
    BLE_AUDIO_DONGLE_CONFIG_OP_MUSIC_UNMIX,
    BLE_AUDIO_DONGLE_CONFIG_OP_LATENCY_SWITCH,
    BLE_AUDIO_DONGLE_CONFIG_OP_GET_DL_CH1_SHARE_INFO,
    BLE_AUDIO_DONGLE_CONFIG_OP_GET_DL_CH2_SHARE_INFO,
    BLE_AUDIO_DONGLE_CONFIG_OP_GET_UL_CH1_SHARE_INFO,
    BLE_AUDIO_DONGLE_CONFIG_OP_GET_UL_CH2_SHARE_INFO,
    BLE_AUDIO_DONGLE_CONFIG_OP_SET_UL_CH1_INPUT_SOURCE,
    BLE_AUDIO_DONGLE_CONFIG_OP_SET_UL_CH2_INPUT_SOURCE,
    BLE_AUDIO_DONGLE_CONFIG_OP_SILENCE_DETECTION_ENABLE,
    BLE_AUDIO_DONGLE_CONFIG_OP_SILENCE_DETECTION_DISABLE,
    BLE_AUDIO_DONGLE_CONFIG_OP_MAX
} ble_audio_dongle_runtime_config_operation_t;
#endif /* AIR_BLE_AUDIO_DONGLE_ENABLE */

#if defined (AIR_ULL_AUDIO_V2_DONGLE_ENABLE)
typedef enum {
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_DL_VOL_INFO = 0,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_DL_VOL_LEVEL,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_DL_MIX,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_DL_UNMIX,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_DL_BITRATE,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_UL_VOL_INFO,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_UL_VOL_LEVEL,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SET_UL_CH_INPUT_SOURCE,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SILENCE_DETECTION_ENABLE,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_SILENCE_DETECTION_DISABLE,
    ULL_AUDIO_V2_DONGLE_CONFIG_OP_MAX
} ull_audio_v2_dongle_runtime_config_operation_t;
#endif /* AIR_ULL_AUDIO_V2_DONGLE_ENABLE */

#if defined (AIR_WIRELESS_MIC_RX_ENABLE)
typedef enum {
    WIRELESS_MIC_RX_CONFIG_OP_SET_UL_VOL_INFO,
    WIRELESS_MIC_RX_CONFIG_OP_SET_UL_VOL_LEVEL,
    WIRELESS_MIC_RX_CONFIG_OP_SET_UL_VOL_OFFSET,
    WIRELESS_MIC_RX_CONFIG_OP_SET_UL_CONNECTION_INFO,
    WIRELESS_MIC_RX_CONFIG_OP_SET_UL_BT_ADDRESS,
    WIRELESS_MIC_RX_CONFIG_OP_MAX
} wireless_mic_rx_runtime_config_operation_t;
#endif /* AIR_WIRELESS_MIC_RX_ENABLE */

#if defined (AIR_DCHS_MODE_ENABLE)
typedef enum {
    DCHS_DL_CONFIG_OP_SET_UART_SCENARIO_VOL_INFO    = 0,
    DCHS_DL_CONFIG_OP_SET_LOCAL_SCENARIO_1_VOL_INFO = 1,
    DCHS_DL_CONFIG_OP_SET_LOCAL_SCENARIO_2_VOL_INFO = 2,
    DCHS_DL_CONFIG_OP_MAX,
} dchs_dl_runtime_config_operation_t;
#endif

typedef enum {
    /* User Unaware */
    AUDIO_ANC_MONITOR_STREAM_CONTROL = 0,
    AUDIO_ANC_MONITOR_SET_USER_UNAWARE_STAT  = 1,
    AUDIO_ANC_MONITOR_SET_USER_UNAWARE_ENABLE,
    AUDIO_ANC_MONITOR_SET_USER_UNAWARE_MAX,

    /* Noise Gate */
    AUDIO_ANC_MONITOR_SET_ENVIRONMENT_DETECTION_ENABLE,
    AUDIO_ANC_MONITOR_SET_ENVIRONMENT_DETECTION_SUSPEND,
    AUDIO_ANC_MONITOR_SET_ENVIRONMENT_DETECTION_MAX,

    /* Wind */
    AUDIO_ANC_MONITOR_SET_WIND_DETECT_ENABLE,
    AUDIO_ANC_MONITOR_SET_WIND_DETECT_SUSPEND,
    AUDIO_ANC_MONITOR_SET_WIND_DETECT_MAX,

    AUDIO_ANC_MONITOR_SET_MAX = 0xFFFF,
} audio_anc_monitor_set_info_t;

typedef enum {
    /* User Unaware */
    AUDIO_ANC_MONITOR_GET_USER_UNAWARE_GAIN_INFO = 1,
    AUDIO_ANC_MONITOR_GET_USER_UNAWARE_ENABLE_STAT,
    AUDIO_ANC_MONITOR_GET_USER_UNAWARE_MAX,

    /* Noise Gate */
    AUDIO_ANC_MONITOR_GET_ENVIRONMENT_DETECTION_STATIONARY_NOISE,
    AUDIO_ANC_MONITOR_GET_ENVIRONMENT_DETECTION_MAX,

    AUDIO_ANC_MONITOR_GET_MAX = 0xFFFF,
} audio_anc_monitor_get_info_t;

#if defined(AIR_BT_AUDIO_DONGLE_ENABLE)
typedef enum {
    BT_AUDIO_DONGLE_CONFIG_OP_USB_DETECT_ENABLE = 0,
    BT_AUDIO_DONGLE_CONFIG_OP_USB_DETECT_DISABLE = 1,
    BT_AUDIO_DONGLE_CONFIG_OP_SET_MIX,
    BT_AUDIO_DONGLE_CONFIG_OP_SET_UNMIX,
    BT_AUDIO_DONGLE_CONFIG_OP_SILENCE_DETECTION_ENABLE,
    BT_AUDIO_DONGLE_CONFIG_OP_SILENCE_DETECTION_DISABLE,
    BT_AUDIO_DONGLE_CONFIG_OP_SET_MUTE,
    BT_AUDIO_DONGLE_CONFIG_OP_SET_UNMUTE,
    BT_AUDIO_DONGLE_CONFIG_OP_MAX,
} bt_audio_dongle_runtime_config_operation_t;
#endif

typedef uint32_t audio_transmitter_runtime_config_type_t;


/*****************************scenario define************************************************/

#if defined (AIR_WIRED_AUDIO_ENABLE)

#if defined(AIR_DCHS_MODE_ENABLE)
#define WIRED_AUDIO_DL_PROCESS_PERIOD 10
#elif defined (AIR_WIRELESS_MIC_TX_ENABLE)
#define WIRED_AUDIO_DL_PROCESS_PERIOD 5
#elif defined (AIR_USB_AUDIO_IN_AND_OUT_MIX_ENABLE)
#define WIRED_AUDIO_DL_PROCESS_PERIOD 3
#else
#define WIRED_AUDIO_DL_PROCESS_PERIOD 3
#endif

#if !defined(AIR_DCHS_MODE_ENABLE)
#define WIRED_AUDIO_DL_PROCESS_HIGH_RES_PERIOD 3
#else
#define WIRED_AUDIO_DL_PROCESS_HIGH_RES_PERIOD 5
#endif

#if defined(AIR_DCHS_MODE_ENABLE)
#define WIRED_AUDIO_MIXING_MODE_USB_DL_OUT_SAMPLE_RATE 48000
#elif defined(AIR_WIRELESS_MIC_TX_ENABLE)
#define WIRED_AUDIO_MIXING_MODE_USB_DL_OUT_SAMPLE_RATE 48000
#elif defined(AIR_USB_AUDIO_IN_AND_OUT_MIX_ENABLE)
#define WIRED_AUDIO_MIXING_MODE_USB_DL_OUT_SAMPLE_RATE 96000
#else
#if defined(FIXED_SAMPLING_RATE_TO_48KHZ)
#define WIRED_AUDIO_MIXING_MODE_USB_DL_OUT_SAMPLE_RATE 48000
#elif defined(AIR_FIXED_DL_SAMPLING_RATE_TO_96KHZ)
#define WIRED_AUDIO_MIXING_MODE_USB_DL_OUT_SAMPLE_RATE 96000
#else
#define WIRED_AUDIO_MIXING_MODE_USB_DL_OUT_SAMPLE_RATE 96000
#endif
#endif

#if defined (AIR_WIRELESS_MIC_TX_ENABLE)
#define WIRED_AUDIO_UL_PROCESS_PERIOD 5
#elif defined (AIR_USB_AUDIO_IN_AND_OUT_MIX_ENABLE)
#define WIRED_AUDIO_UL_PROCESS_PERIOD 3
#else
#define WIRED_AUDIO_UL_PROCESS_PERIOD 15  /* Unit of ms for DSP process period */
#endif

#define WIRED_AUDIO_UL_MAX_SAMPLE_RATE  192000

#define AIR_LINE_IN_LATENCY_HIGH /* Custmize the latency of line in */
#if defined(AIR_LINE_IN_LATENCY_LOW)
#define WIRED_AUDIO_LINE_IN_PROCESS_SAMPLES 32
#elif defined(AIR_LINE_IN_LATENCY_MEDIUM)
#define WIRED_AUDIO_LINE_IN_PROCESS_SAMPLES 64
#elif defined(AIR_LINE_IN_LATENCY_HIGH)
#define WIRED_AUDIO_LINE_IN_PROCESS_SAMPLES 128
#else
#define WIRED_AUDIO_LINE_IN_PROCESS_SAMPLES 128
#endif
//#define AIR_LINE_IN_PREFILL_SIZE 100 /* Custmize the prefill size of Line in, unit of percentage */

#define AIR_USB_IN_LATENCY_HIGH /* Custmize the latency of USB in */
#if defined(AIR_USB_IN_LATENCY_LOW)
#define WIRED_AUDIO_USB_IN_PROCESS_PERIOD 1
#elif defined(AIR_USB_IN_LATENCY_HIGH)
#if defined (AIR_WIRELESS_MIC_TX_ENABLE)
#define WIRED_AUDIO_USB_IN_PROCESS_PERIOD 5
#else
#define WIRED_AUDIO_USB_IN_PROCESS_PERIOD 3
#endif
#else
#define WIRED_AUDIO_USB_IN_PROCESS_PERIOD 3
#endif
//#define AIR_USB_IN_PREFILL_SIZE 100 /* Custmize the prefill size of USB in, unit of percentage */

#endif

#if defined (AIR_RECORD_ADVANCED_ENABLE)
#define RECORD_ADVANCED_FRAME_SIZE   (16*1024)
#endif /* AIR_RECORD_ADVANCED_ENABLE */

#ifdef __cplusplus
}
#endif

#endif/*__AUDIO_TRANSMITTER_MCU_DSP_COMMON_H__*/
